#!/bin/bash

#%Module
#%  description: Link GRASS GIS raster maps between Mapsets
#%  keywords: raster, link, hardlink, softlink, symlink
#%End

#% flag
#%  key: d
#%  description: Dry run: do not link, show only what would be linked
#% end

#% flag
#%  key: s
#%  description: Create symbolic links instead of hard links
#% end

#% flag
#%  key: u
#%  description: Call the unlink function to remove hardlinked raster map files
#% end

#% flag
#%  key: f
#%  description: Force remove hardlinked raster map files
#% end

##% rules
##%  requires: f, u
##%  exclusive: f, d
##% end

#%option G_OPT_R_INPUT
#% key: input
#% key_desc: filename
#% description: Input raster map to link to
#% required : yes
#%end

#%option
#% key: mapset
#% type: string
#% description: Mapset of input raster map to link to
#% required: yes
#%end

#%option
#% key: outputsuffix
#% key_desc: output raster map name suffix
#% key_desc: filename
#% type: string
#% description: Output suffix added after the input raster map name
#% required: no
#%end

# inside a GRASSy environent?

if [ -z "$GISBASE" ] ; then
    g.message -e "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi


# Parse arguments

if [ "$1" != "@ARGS_PARSED@" ] ;then

    CMDLINE=$(basename "$0")

    for arg in "$@" ;do

        CMDLINE="$CMDLINE \"$arg\""

    done

    export CMDLINE
    exec g.parser "$0" "$@"

fi


# what to do in case of user break:

function exitprocedure {
    g.message -e message='User break!'
    cleanup
    exit 1
}


# shell check for user break (signal list: trap -l)

trap "exitprocedure" 2 3 15


# Globals

CELL='cell'
ELEMENTS="cats cell cellhd colr fcell hist cell_misc"
CURRENT_DATABASE=$(g.gisenv get=GISDBASE)
CURRENT_LOCATION=$(g.gisenv get=LOCATION_NAME)
CURRENT_MAPSET=$(g.gisenv get=MAPSET)
CURRENT_MAPSET_PATH="$CURRENT_DATABASE/$CURRENT_LOCATION/$CURRENT_MAPSET"

MESSAGE_UNLINKING_REQUESTED="The requested linked raster map files would be removed:"
MESSAGE_UNLINKING_WARNING="Nothing removed. "
MESSAGE_UNLINKING_EMPTY_LIST="There are no raster map files matching the input name to remove."

MESSAGE_UNLINKING_WARNING+="You must use the force flag (-f) to actually unlink the specified hardlinked raster map files. "
MESSAGE_UNLINKING_WARNING+="Exiting."

MESSAGE_UNLINKING="Removing linked raster map file "
MESSAGE_UNLINKING_ADDITIONAL_INFORMATION="No element directories removed. Please carefully remove such elements manually."

# Set variables from input arguments

DRYRUN=$GIS_FLAG_D
if (( DRYRUN == 1 )) ;then
    g.message -i "Dry run: no directories and/or links creation performed!"
    g.message -i ""
fi
SOFTLINK=$GIS_FLAG_S
if (( SOFTLINK == 1 )) ;then
    g.message -i "Soft instead of hard linking requested"
    g.message -i ""
fi
UNLINK=$GIS_FLAG_U
FORCE_UNLINKING=$GIS_FLAG_F

TARGET_RASTER_MAP=$GIS_OPT_INPUT
TARGET_MAPSET=$GIS_OPT_MAPSET
LINK_RASTER_MAP_SUFFIX=$GIS_OPT_OUTPUTSUFFIX


# Does the input raster map exist?

DETECTED_RASTER_MAP=$(g.findfile -n \
    mapset="$TARGET_MAPSET" \
    element=$CELL \
    file="$TARGET_RASTER_MAP" |grep ^name |cut -d"=" -f2)

if [ -z "$DETECTED_RASTER_MAP" ] ;then

    g.message -e "Can't find the <$TARGET_RASTER_MAP> raster map"
    exit 1

    # else

    # g.message -v "Input raster map: $DETECTED_RASTER_MAP"
    # g.message -v "Input Mapset: $TARGET_MAPSET"
    # unset name

fi


# Get GRASS GIS variables for target raster map to hard-link to

# -----------------------------------------------------------------------------
eval $(r.info -e map="${TARGET_RASTER_MAP}@${TARGET_MAPSET}" |grep -v ^comment)
TARGET_MAPSET_PATH="$database/$location/$mapset"
# g.message -v "Path to Target Mapset $TARGET_MAPSET_PATH"

# To Do -------------------------------------------------------
#evaluate=( "r.info" "-e " "$RASTER_MAP"@"$RASTER_MAP_MAPSET" )
#${evaluate[@]}

# Note, POSIX sh does not support arrays
# -----------------------------------------------------------------------------


# Remove unnecessary variables

unset database
unset location
unset mapset


# Loop over elements to hard-link to

for ELEMENT in $ELEMENTS ;do

    ELEMENT_PATH="$CURRENT_MAPSET_PATH/$ELEMENT"

    TARGET=$TARGET_MAPSET_PATH/$ELEMENT/$TARGET_RASTER_MAP
    # g.message -v "Target: $TARGET"

    LINK=$CURRENT_MAPSET_PATH/$ELEMENT/$TARGET_RASTER_MAP
    if [ -n "$LINK_RASTER_MAP_SUFFIX" ] ;then
        LINK+="_${LINK_RASTER_MAP_SUFFIX}"
    fi
    # g.message -v "Link name: $LINK"

    case $ELEMENT in

        "cats"|"cell"|"cellhd"|"colr"|"fcell"|"hist")

            if [ -f "$TARGET" ] ;then  # if target exists

                if (( UNLINK == 0 )) ;then  # unlinking not requested

                    if [ ! -d "$ELEMENT_PATH" ] ;then  # create Element

                        g.message -v "Element: $ELEMENT"
                        g.message -v "+ Creating element directory $ELEMENT_PATH"
                        if (( DRYRUN == 0 )) ;then  # if dry run not requested
                            mkdir "$ELEMENT_PATH"
                        fi

                    else

                        g.message -w "Element '$ELEMENT' already exists"

                    fi

                    if [ ! -f "$LINK" ] ;then  # if hardlink does no exist

                        g.message -v "> Linking '$TARGET' to '$LINK'"
                        if (( DRYRUN == 0 )) ;then  # if dry run not requested
                            if (( SOFTLINK == 1 )) ;then  # if softlinking requested
                                ln -s "$TARGET" "$LINK"
                            else
                                ln "$TARGET" "$LINK"
                            fi
                        fi
                        g.message -v ""

                    else

                        g.message -w "A raster map file with the name '$TARGET_RASTER_MAP' already exists!"

                    fi
                fi

                if (( UNLINK == 1 )) ;then  # unlinking requested

                    # allow removal of LINK only if number of hardlinks is > 1
                    TARGET_INODE=$(stat -c %i "$TARGET")
                    TARGET_INODE_HARDLINKS=$(stat -c %h "$TARGET")
                    # g.message -i "Number of hardlinks: $TARGET_INODE_HARDLINKS"

                    if [ -f "$LINK" ] ;then

                        # if $LINK is a symlink OR number of hardlinks is > 1
                        if [ -L "$LINK" ] || (( TARGET_INODE_HARDLINKS > 1 )) ;then

                            LIST_TO_UNLINK+="${LINK} "
                            # g.message -i "List is now: $LIST_TO_UNLINK"

                        elif [ ! -L "$LINK" ] && (( TARGET_INODE_HARDLINKS == 1 )) ;then

                            g.message -i "The raster map name '$LINK' is the only hardlink for the inode '$TARGET_INODE'. No action."

                        fi

                    else

                        g.message -v "There is no raster map file '$LINK' to remove"

                    fi
                fi
            fi ;;

        "cell_misc")

            # In which case, LINK is a path and not a file
            # g.message -v "Link to Cell Misc Element: $LINK"

            if [ ! -d "$LINK" ] ;then

                g.message -v "+ Creating sub-element directory '$LINK'"
                if (( DRYRUN == 0 )) ;then  # if dry run not requested
                    mkdir -p "$LINK"
                fi
                g.message -v ""

            else

                if (( UNLINK == 0 )) ;then
                    g.message -w "Sub-element '$ELEMENT/$TARGET_RASTER_MAP' already exists"
                fi

            fi

            for CELL_MISC_ELEMENT in "$TARGET"/* ;do  # for existing targets

                CELL_MISC_ELEMENT_BASENAME=$( basename "$CELL_MISC_ELEMENT" )
                CELL_MISC_LINK=$LINK/$CELL_MISC_ELEMENT_BASENAME

                if (( UNLINK == 0 )) ;then  # unlinking not requested

                    if [ ! -f "$CELL_MISC_LINK" ] ;then  # if hardlink does not exist

                        g.message -v "> Linking '$CELL_MISC_ELEMENT' to '$CELL_MISC_LINK'"
                        if (( DRYRUN == 0 )) ;then  # if dry run not requested

                            if (( SOFTLINK == 1 )) ;then

                                ln -s "$CELL_MISC_ELEMENT" "$CELL_MISC_LINK"

                            else

                                ln "$CELL_MISC_ELEMENT" "$CELL_MISC_LINK"
                            fi

                        fi
                        g.message -v ""

                    else

                        g.message -w "Meta-element '$TARGET_RASTER_MAP/$CELL_MISC_ELEMENT_BASENAME' already exists"

                    fi

                elif (( UNLINK == 1 )) ;then  # unlinking requested

                    # allow removal of LINK only if number of hardlinks is > 1
                    TARGET_INODE=$(stat -c %i "$TARGET")
                    TARGET_INODE_HARDLINKS=$(stat -c %h "$CELL_MISC_ELEMENT")
                    # g.message -i "Number of hardlinks: $TARGET_INODE_HARDLINKS"

                    if [ -f "$CELL_MISC_LINK" ] ;then

                        if [ -L "$CELL_MISC_LINK" ] || (( TARGET_INODE_HARDLINKS > 1 )) ;then

                            LIST_TO_UNLINK+="${CELL_MISC_LINK} "
                            # g.message -i "List is now: $LIST_TO_UNLINK"

                        elif [ ! -L "$CELL_MISC_LINK" ] && (( TARGET_INODE_HARDLINKS == 1 )) ;then

                            g.message -i "The raster map's '$LINK' meta-element '$CELL_MISC_LINK' is the only hardlink for the inode '$TARGET_INODE'. No action."

                        fi

                    else

                        g.message -v "There is no raster map file '$LINK' to remove"

                    fi

                fi

            done ;;

        esac

    done

    if [ -n "$LIST_TO_UNLINK" ] ;then

        if (( UNLINK == 1 )) ;then

            if (( FORCE_UNLINKING == 0 )) ;then

                g.message "$MESSAGE_UNLINKING_REQUESTED"
                g.message "$LIST_TO_UNLINK"
                g.message ""
                g.message -w "$MESSAGE_UNLINKING_WARNING" 

            elif [ "$FORCE_UNLINKING" == 1 ] ;then

                for ITEM in $LIST_TO_UNLINK; do

                    g.message -i "$MESSAGE_UNLINKING <$ITEM>"
                    unlink "$ITEM"

                done

                g.message -i ""
                g.message -i "$MESSAGE_UNLINKING_ADDITIONAL_INFORMATION"

            fi
        fi

    elif [ -z "$LIST_TO_UNLINK" ] && (( UNLINK == 1 )) ;then

        g.message -i "$MESSAGE_UNLINKING_EMPTY_LIST"

    fi
